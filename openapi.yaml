openapi: 3.0.3
info:
  title: Swagger FarAway - OpenAPI 3.0
  description: |-
    Some useful links:
    - [The FarAway repository](https://github.com/Egor200313/FarAway)
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
servers:
  - url: https://faraway.tickets.com/api/v3
tags:
  - name: tickets
    description: Access to tickets purchased
  - name: search
    description: Operations about searching for flights
  - name: offers
    description: Best flight offer
paths:
  /search:
    get:
      tags:
        - search
      summary: Get available tickets by origin, destination and date
      description: ''
      operationId: getFlightsOnDate
      parameters:
        - name: from
          description: 'The origin airport city. Moscow for example'
          in: query
          required: True
          schema:
            type: string
            pattern: ^[A-Z]{3}$
        - name: to
          description: 'The destination airport city. Dubai for example'
          in: query
          required: True
          schema:
            type: string
            pattern: ^[A-Z]{3}$
        - name: date
          description: 'Departure date'
          in: query
          schema:
            type: string
            pattern: ^[0-9]{4}-[0-9]{2}-[0-9]{2}$
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tickets'
  /tickets/{uid}:
    get:
      tags:
       - tickets
      summary: Get all users tickets
      description: ''
      operationId: getTicketByUser
      parameters:
        - name: uid
          required: true
          description: 'ID of user'
          in: path
          schema:
            type: integer
            format: uint64
      responses:
        '200':
          description: successfull operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tickets'
        '404':
          description: invalid user id
  /offers/{dep_city}:
    get:
      tags:
        - offers
      summary: Get best price tickets from city
      description: ''
      operationId: getOffersFromCity
      parameters:
        - name: dep_city
          required: true
          description: 'Origin city of trip'
          in: path
          schema:
            type: string
      responses:
        '200':
          description: successfull operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Offers'
        '404':
          description: invalid city of origin
  /register:
    post:
      tags:
        - customer
      summary: Register new customer
      description: ''
      operationId: register
      requestBody:
        description: Create a new customer
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPost'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserGet'
  /customer:
    patch:
      tags:
        - customer
      summary: Update customer
      description: ''
      operationId: update
      requestBody:
        description: Update customer
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserGet'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserGet'
components:
  schemas:
    UserGet:
      type: object
      properties:
        id:
          type: integer
          example: 123
        first_name:
          type: string
          example: "John"
        last_name:
          type: string
          example: "Snow"
        phone:
          type: string
          pattern: ^\+[1-9]-[0-9]{3}-[0-9]{3}-[0-9]{4}$
          example: "+1-234-567-8999"
        email:
          type: string
          example: "john@gmail.com"
        city:
          type: string
          example: "Moscow"
        country:
          type: string
          example: "Russian Federation"
    UserPatch:
      type: object
      properties:
        first_name:
          type: string
          example: "John"
        last_name:
          type: string
          example: "Snow"
        phone:
          type: string
          pattern: ^\+[1-9]-[0-9]{3}-[0-9]{3}-[0-9]{4}$
          example: "+1-234-567-8999"
        email:
          type: string
          example: "john@gmail.com"
        city:
          type: string
          example: "Moscow"
        country:
          type: string
          example: "Russian Federation"
    UserPost:
      type: object
      properties:
        first_name:
          type: string
          example: "John"
        last_name:
          type: string
          example: "Snow"
        phone:
          type: string
          pattern: ^\+[1-9]-[0-9]{3}-[0-9]{3}-[0-9]{4}$
          example: "+1-234-567-8999"
        email:
          type: string
          example: "john@gmail.com"
        city:
          type: string
          example: "Moscow"
        country:
          type: string
          example: "Russian Federation"
        password:
          type: string
          example: "pwd"
    Offer:
      type: object
      properties:
        id:
          type: integer
          format: uint64
          example: 100500
        city:
          type: string
          example: "New York"
        photo_url:
          type: string
          example: "new_york.jpg"
        price:
          type: number
          example: 100.00
        departure_date:
          type: string
          pattern: ^[0-9]{4}-[0-9]{2}-[0-9]{2}$
          example: "2024-02-28"
        arrival_date:
          type: string
          pattern: ^[0-9]{4}-[0-9]{2}-[0-9]{2}$
          example: "2024-03-05"
      xml:
        name: offer
    Offers:
      type: array
      xml:
        name: offers
        wrapped: true
      items:
        $ref: '#/components/schemas/Offer'
    Route:
      type: object
      properties:
        id:
          type: integer
          format: uint64
          example: 4567
        origin:
          $ref: '#/components/schemas/Airport'
        destination:
          $ref: '#/components/schemas/Airport'
        duration_munites:
          type: integer
          format: uint64
          example: 300
      xml:
        name: route
    Airport:
      type: object
      properties:
        name:
          type: string
          pattern: ^[A-Z]{3}$
          example: "DME"
        city:
          type: string
          example: "Moscow"
        country:
          type: string
          example: "Russian Federation"
      xml:
        name: airport
    Aircraft:
      type: object
      properties:
        manufacturer:
          type: string
          example: "Airbus"
        model:
          type: string
          example: "A380"
        seats:
          type: integer
          format: uint64
          example: 520
      xml:
        name: aircraft
    Flight:
      type: object
      properties:
        id:
          type: integer
          format: uint64
          example: 123456
        airline:
          type: string
          example: "Emirates"
        route:
          $ref: '#/components/schemas/Route'
        aircraft:
          $ref: '#/components/schemas/Aircraft'
        dep_time:
          type: string
          example: "2023-05-31T12:00:00+03:00"
          pattern: ^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}\+[0-9]{2}:[0-9]{2}$
      xml:
        name: flight
    Ticket:
      type: object
      properties:
        id:
          type: integer
          format: uint64
          example: 123
        flight:
          $ref: '#/components/schemas/Flight'
        class:
          type: string
          example: "economy"
        price:
          type: number
          example: 1000.50
        luggage_kg:
          type: number
          example: 20.0
        hand_luggage_kg:
          type: number
          example: 10.0
        refundable:
          type: boolean
          example: false
      xml:
        name: ticket
    Tickets:
      type: array
      xml:
        name: tickets
        wrapped: true
      items:
        $ref: '#/components/schemas/Ticket'